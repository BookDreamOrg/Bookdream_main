<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
			
<mapper namespace="OrderDAO">

	<resultMap type="order" id="orderList">
		<result property="order_no" column="ORDER_NO" />
		<result property="order_name" column="ORDER_NAME" />	
		<result property="user_no" column="USER_NO" />	
		<result property="order_date" column="ORDER_DATE" />	
		<result property="order_status" column="ORDER_STATUS" />	
		<result property="status_count" column="STATUS_COUNT" />	
		<collection property="purchaseVO" resultMap="purchaseList"></collection>		
		<collection property="bookVO" resultMap="bookList"></collection>
		<collection property="payVO" resultMap="payList"></collection>
	</resultMap>	

	<resultMap type="purchase" id="purchaseList">
		<result property="book_no" column="BOOK_NO"/>
		<result property="order_no" column="ORDER_NO" />		
	</resultMap>

	<resultMap type="book" id="bookList">
		<result property="book_no" column="BOOK_NO"/>
		<result property="title" column="TITLE" />
		<result property="book_img" column="BOOK_IMG" />		
	</resultMap>

	<resultMap type="pay" id="payList">
		<result property="final_price" column="FINAL_PRICE"/>

	</resultMap>
	
	<insert id="insertOrder" >
		INSERT INTO orders(ORDER_NO, 
						   USER_NO, 
						   PAY_NO, 
						   ORDER_NAME, 
						   ORDER_COMMENT, 
						   ORDER_DATE,
						   ORDER_RECEIVER, 
						   ORDER_ADDRESS, 
						   ORDER_TEL 
						   )
		VALUES  (#{pay_no}, 
		         #{user_no}, 
		         #{pay_no}, 
		         #{order_name}, 
		         #{order_comment}, 
		         #{order_date},
		         #{order_receiver}, 
		         #{order_address}, 
		         #{order_tel} 
		         )
	</insert>
		
	<!-- 마이페이지 주문조회 (간단) 1개월 이내만 조회!! -->
	<select id="searchOrder" parameterType="order" resultMap="orderList">		
		SELECT order_no, 
			   order_name, 
			   book_img, 
      		   order_date,
			   final_price,
			   order_status
		FROM   (select o.order_no, 
                	   o.order_name, 
                       b.book_img, 
                       o.order_date,
                       y.final_price,
                       o.order_status,
	 			       ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
	 			from   orders o, 
	 			       purchase p, 
	 			       book b,
	 			       pay y
	 			where  p.book_no = b.book_no   AND
                       p.order_no = o.order_no AND
                       y.pay_no = o.order_no   AND
                       o.user_no = #{user_no}
                )
        WHERE rn = 1 
        	<![CDATA[
        	 	AND order_date > sysdate-#{search_date} 
        	]]>
         	<choose>
         		<when test="search_status == 100 ">
         			AND	1 = 1         			
         		</when>
         		<otherwise>
        			AND order_status = #{search_status}         			
         		</otherwise>
         	</choose>
		order by order_no desc

	</select>
	
	<!-- 마이페이지 최근 구매 조회-->
	<select id="recentOrder" parameterType="order" resultMap="orderList">		
		SELECT order_no, 
			   order_name, 
			   book_img, 
      		   order_date,
			   final_price,
			   order_status
		FROM   (select o.order_no, 
                	   o.order_name, 
                       b.book_img, 
                       o.order_date,
                       y.final_price,
                       o.order_status,
	 			       ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
	 			from   orders o, 
	 			       purchase p, 
	 			       book b,
	 			       pay y
	 			where  p.book_no = b.book_no   AND
                       p.order_no = o.order_no AND
                       y.pay_no = o.order_no   AND
                       o.user_no = #{user_no} 
                order by order_no desc
                )
        WHERE rn = 1 AND
			  rownum = 1		


	</select>	
	
	

	<!-- 마이페이지 주문조회 (간단) (관리자 페이지로 넘길예정 : 페이징처리추가됨)
		
	<select id="searchOrder" parameterType="order" resultMap="orderList">		
		select order_no,
			   order_name,
			   book_img, 
      		   order_date,
			   final_price,
			   order_status				   
		FROM  (SELECT  ROW_NUMBER() OVER (ORDER BY rnum DESC) AS rnum,
		              order_no, 
		              order_name, 
		              book_img,
		              order_date,	
		              final_price, 
		              order_status
		      from   (select rownum rnum, 
		      				 o.order_no, 
		                     o.order_name, 
		                     b.book_img, 
		                     o.order_date,
		                     y.final_price,
		                     o.order_status,
		                     ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
		              from   orders o, 
		                     purchase p, 
		                     book b,
		                     pay y
		              where  p.book_no = b.book_no   AND
		                     p.order_no = o.order_no AND
		                     y.pay_no = o.order_no   AND
		                     o.user_no = #{user_no}
		              )
		     where rn = 1
		     order by rnum desc)
		     
		WHERE rnum between ((#{pageNum}-1) * #{amount})+1 AND 
		                     #{pageNum} * #{amount}	
		order by order_no desc                     
	</select>	
	
	-->	
		
	<!-- 결제취소 -->
	<update id="cancelOrder">
		UPDATE orders
		SET	   order_status = 10
		WHERE  order_no = #{order_no} AND
			   order_status = 0
	</update>	

	<!-- 반품신청 -->
	<update id="cancelOrder2">
		UPDATE orders
		SET	   order_status = 11
		WHERE  order_no = #{order_no} AND
		       order_status = 2
	</update>	
			
	<!-- 도서반환 -->	
	<update id="updateBookStock">	
		UPDATE book b
		SET    b.stock = (select (b.stock + p.product_count) as stock
                 		  from  purchase p,
                 		  		orders o
                 		  where p.book_no = b.book_no AND
                  	            p.order_no = o.order_no AND                   		   
                 		  		o.order_no = #{order_no}
                 		  )
                  
		WHERE  exists (select 1
                 	   from    purchase p,
                 		  	   orders o
                  	   where   p.book_no = b.book_no AND 
                  	           p.order_no = o.order_no AND      
                 		  	   o.order_no = #{order_no}
               		   ) 
		
	</update>	
	
	<!-- 포인트 반환 -->	
	<update id="updateUserPoint">
		UPDATE users u
		SET    user_point = (select (user_point + (use_point - save_point)) as user_point
                  			 from    
                  			 		 pay p
                  			 where   u.user_no = #{user_no} AND 
                  			 		 p.pay_no = #{order_no}
                  			 )
                  			 
		WHERE  exists (select 1 
         		       from   
         		       		  pay p 
             	       where  u.user_no = #{user_no} AND           	       
             	       		  p.pay_no = #{order_no}
             	      ) 
	
	</update>	

	<!-- 주문조회시 결제날짜와 현재날짜를 계산해서 갱신함 -->
	<update id="trackingUpdate">		
		<![CDATA[	
		UPDATE orders
		SET    order_status = 1
		WHERE  order_date + 1 < sysdate AND
      		   order_status = 0
      	]]>	  
	</update>
		
	<update id="trackingUpdate2">		
		<![CDATA[	
		UPDATE orders
		SET    order_status = 2
		WHERE  order_date + 2 < sysdate AND
      		   order_status = 1
      	]]>	  
	</update>
	
	<!-- 배송상태별 카운터 -->
	<select id="orderStatusCount" resultType="HashMap">
		SELECT order_status, count(order_status) as statusCount
		FROM   orders
		WHERE  user_no = #{user_no}
		group by order_status
	</select>
			
	<!-- 관리자 : 일주일 주문 카운트 -->		
	<select id="orderDateCount" resultType="HashMap">
	<![CDATA[
		SELECT to_date(b.dt, 'YY-MM-DD')as order_date,
		       nvl(sum(a.cnt), 0) cnt
		FROM  (select to_date(order_date, 'YY-MM-DD')as order_date,
		              count(order_date) cnt
		       from orders
		       where order_date between to_date(sysdate-4, 'YY-MM-DD') AND 
		             to_date(sysdate, 'YY-MM-DD') AND
		             order_status between 0 and 3
		       group by order_date) a,      
		      
		      (select to_date(TO_DATE(sysdate-6,'YY/MM/DD') + LEVEL - 1, 'YY/MM/DD') AS dt
		       from dual 
		       CONNECT BY LEVEL <= (TO_DATE(sysdate,'YY/MM/DD') - TO_DATE(sysdate-6,'YY/MM/DD') + 1)) b
		WHERE b.dt = order_date(+)
		group by b.dt
		order by b.dt  
	]]>	    
	</select>		

	<!-- 관리자 : 일주일 주문 취소/반품 카운트 -->		
	<select id="orderCancelDateCount" resultType="HashMap">
	<![CDATA[
		SELECT nvl(sum(a.cnt2), 0) cnt2
		FROM  (select to_date(cancel_date, 'YY-MM-DD') as order_cancel_date,
		              count(cancel_date) cnt2
		       from orders
		       where to_date(cancel_date, 'YY-MM-DD') between to_date(sysdate-4, 'YY-MM-DD') AND 
		             to_date(sysdate, 'YY-MM-DD') AND
		             order_status between 10 and 13
		       group by cancel_date) a,      
		       
		      (select to_date(TO_DATE(sysdate-6,'YY/MM/DD') + LEVEL - 1, 'YY/MM/DD') AS dt
		       from dual 
		       CONNECT BY LEVEL <= (TO_DATE(sysdate,'YY/MM/DD') - TO_DATE(sysdate-6,'YY/MM/DD') + 1)) b
		WHERE b.dt = order_cancel_date(+)
		group by b.dt
		order by b.dt  
	]]>	    
	</select>			
</mapper>