<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
			
<mapper namespace="OrderDAO">
	
	<insert id="insertOrder" >
		INSERT INTO orders(ORDER_NO, 
						   USER_NO, 
						   PAY_NO, 
						   ORDER_NAME, 
						   ORDER_COMMENT, 
						   ORDER_DATE,
						   ORDER_RECEIVER, 
						   ORDER_ADDRESS, 
						   ORDER_TEL 
						   )
		VALUES  (#{pay_no}, 
		         #{user_no}, 
		         #{pay_no}, 
		         #{order_name}, 
		         #{order_comment}, 
		         #{order_date},
		         #{order_receiver}, 
		         #{order_address}, 
		         #{order_tel} 
		         )
	</insert>
		
	<!-- 마이페이지 주문조회 (간단) 1개월 이내만 조회!! -->
	<select id="searchOrder" resultType="HashMap">		
		SELECT order_no,
			   order_name,
			   book_img, 
      		   order_date,
			   final_price,
			   order_status,
			   TO_CHAR(start_date, 'YY.MM.DD HH24:MI') AS start_date,
		       TO_CHAR(cmplt_date, 'YY.MM.DD HH24:MI') AS cmplt_date		   				   
		FROM  (SELECT  ROW_NUMBER() OVER (ORDER BY rnum DESC) AS rnum,
		              order_no, 
		              order_name, 
		              book_img,
		              order_date,	
		              final_price, 
		              order_status,
		              start_date,
		              cmplt_date		              
		       FROM   (select rownum rnum, 
		      				  o.order_no, 
		                      o.order_name, 
		                      b.book_img, 
		                      o.order_date,
		                      y.final_price,
		                      o.order_status,
		                      d.start_date,
		                      d.cmplt_date,
		                      ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
		              FROM    orders o, 
		                      purchase p, 
		                      book b,
		                      pay y,
		                      delivery d
		              WHERE   p.book_no = b.book_no   AND
		                      p.order_no = o.order_no AND
		                      y.pay_no = o.order_no   AND
		                      o.order_no = d.order_no AND
		                      o.user_no = #{user_no}
							  <choose>
								<when test="order_status == 100">
									AND 1=1
								</when>
								<otherwise>
									AND order_status = #{order_status}
								</otherwise>
							  </choose>			  
							  AND order_date BETWEEN #{srchStrDate} AND TO_DATE(TO_DATE(#{srchEndDate})+1)			                      
		                      
		              )
		     WHERE rn = 1
		     ORDER BY rnum desc)
		     
		WHERE rnum between ((#{pageNum}-1) * #{amount})+1 AND 
		                     #{pageNum} * #{amount}	
		                     
		order by order_no desc   
	</select>
	
	<!-- 카운트 -->
	<select id="searchOrderCount" resultType="int">
		SELECT count(*)
		FROM   (select o.order_no,
	 			       ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
	 			from   orders o, 
	 			       purchase p, 
	 			       book b,
	 			       pay y
	 			where  p.book_no = b.book_no   AND
                       p.order_no = o.order_no AND
                       y.pay_no = o.order_no   AND
                       o.user_no = #{user_no}
 					   <choose>
					   	<when test="order_status == 100">
							AND 1=1
						</when>
						<otherwise>
							AND order_status = #{order_status}
						</otherwise>
					   </choose>			  
						 	AND order_date BETWEEN #{srchStrDate} AND TO_DATE(TO_DATE(#{srchEndDate})+1)	 						 	                      
                order by order_no desc 
                      
                )
        WHERE rn = 1 
		order by order_no desc	
	</select>
	
	
	
	
	<!-- 마이페이지 최근 구매 조회-->
	<select id="recentOrder" resultType="HashMap">		
		SELECT order_no, 
			   order_name, 
			   book_img, 
      		   order_date,
			   final_price,
			   order_status
		FROM   (select o.order_no, 
                	   o.order_name, 
                       b.book_img, 
                       o.order_date,
                       y.final_price,
                       o.order_status,
	 			       ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
	 			from   orders o, 
	 			       purchase p, 
	 			       book b,
	 			       pay y
	 			where  p.book_no = b.book_no   AND
                       p.order_no = o.order_no AND
                       y.pay_no = o.order_no   AND
                       o.user_no = #{user_no})
        WHERE rn = 1 AND
			  rownum = 1		


	</select>	
		
	<!-- 주문취소/반품요청시 배송상태 변경, 취소시간등록-->
	<update id="cancelOrder">
		UPDATE orders
		SET	   order_status = #{order_status},
			   cancel_date = sysdate
		WHERE  order_no = #{order_no} 												
	</update>							
									
	<!-- 포인트 반환 -->	
	<update id="updateUserPoint">
		UPDATE users u
		SET    user_point = (select (user_point + (use_point - save_point)) as user_point
                  			 from    
                  			 		 pay p
                  			 where   u.user_no = #{user_no} AND 
                  			 		 p.pay_no = #{order_no}
                  			 )
                  			 
		WHERE  exists (select 1 
         		       from   
         		       		  pay p 
             	       where  u.user_no = #{user_no} AND           	       
             	       		  p.pay_no = #{order_no}
             	      ) 
	
	</update>	

	 
	<!-- 배송상태별 카운터 -->
	<select id="orderStatusCount" resultType="HashMap">
		SELECT order_status, count(order_status) as statusCount
		FROM   orders
		WHERE  
		<choose>
			<when test='admin.equals("admin")'>
			1 = 1
			</when>
			<otherwise>
			user_no = #{user_no}
			</otherwise>
		</choose>
		group by order_status
	</select>
			
	<!-- 관리자 : 주간 주문 카운트 -->		
	<select id="orderDateCount" resultType="HashMap">
	<![CDATA[
		SELECT to_char(b.dt, 'MM-DD')as order_date,
		       nvl(sum(a.cnt), 0) cnt
		FROM  (select to_date(order_date, 'YY-MM-DD')as order_date,
		              count(case when order_status between 0 and 3 AND 
              		  to_date(order_date, 'YY-MM-DD') between to_date(sysdate-4, 'YY-MM-DD') AND 
              		  to_date(sysdate, 'YY-MM-DD') then 1 end) cnt
		       from orders
		       group by order_date) a,      
		      
		      (select to_date(TO_DATE(sysdate-6,'YY/MM/DD') + LEVEL - 1, 'YY/MM/DD') AS dt
		       from dual 
		       CONNECT BY LEVEL <= (TO_DATE(sysdate,'YY/MM/DD') - TO_DATE(sysdate-6,'YY/MM/DD') + 1)) b
		WHERE b.dt = order_date(+)
		group by b.dt
		order by b.dt  
	]]>	    
	</select>		

	<!-- 관리자 : 주간 주문 취소/반품 카운트 -->		
	<select id="orderCancelDateCount" resultType="HashMap">
	<![CDATA[
		SELECT nvl(sum(a.cnt2), 0) cnt2
		FROM  (select to_date(cancel_date, 'YY-MM-DD') as order_cancel_date,
		              count(cancel_date) cnt2
		       from orders
		       where to_date(cancel_date, 'YY-MM-DD') between to_date(sysdate-4, 'YY-MM-DD') AND 
		             to_date(sysdate, 'YY-MM-DD') AND
		             order_status between 10 and 13
		       group by cancel_date) a,      
		       
		      (select to_date(TO_DATE(sysdate-6,'YY/MM/DD') + LEVEL - 1, 'YY/MM/DD') AS dt
		       from dual 
		       CONNECT BY LEVEL <= (TO_DATE(sysdate,'YY/MM/DD') - TO_DATE(sysdate-6,'YY/MM/DD') + 1)) b
		WHERE b.dt = order_cancel_date(+)
		group by b.dt
		order by b.dt  
	]]>	    
	</select>
	
	
	<!-- 관리자 : 월간 주문 카운트 -->
	<select id="orderMlyDateCount" resultType="HashMap">
	<![CDATA[	
		SELECT  TO_CHAR(b.dt, 'YY-MM')as order_date, 
		        nvl(sum(a.cnt), 0) cnt
		FROM    (select to_date(order_date, 'YY-MM-DD')as order_date, 
		               count(case when order_status between 0 and 3 AND 
		                     to_date(order_date, 'YY-MM-DD') between to_date('220801', 'YY-MM-DD') AND 
		                     to_date('230228', 'YY-MM-DD') then 1 end) cnt               
		        from orders
		        group by order_date) a,      
		        (SELECT to_date(TO_DATE('220801','YY-MM-DD') + LEVEL - 1, 'YY-MM-DD') AS dt
		        FROM dual 
		        CONNECT BY LEVEL <= (TO_DATE('230228','YY-MM-DD') - TO_DATE('220801','YY-MM-DD') + 1)) b
		WHERE b.dt = a.order_date(+) 
		group by TO_CHAR(b.dt, 'YY-MM')
		order by TO_CHAR(b.dt, 'YY-MM')	
	]]>	
	</select>
	
	<!-- 관리자 : 월간 주문 취소/반품 카운트 -->
	<select id="orderMlyCancelDateCount" resultType="HashMap">
	<![CDATA[		
		SELECT  nvl(sum(a.cnt), 0) cnt2
		FROM    (select to_date(cancel_date, 'YY-MM-DD')as order_date, 
		                count(case when order_status between 10 and 13 AND 
		                      to_date(cancel_date, 'YY-MM-DD') between to_date('220801', 'YY-MM-DD') AND 
		                      to_date('230228', 'YY-MM-DD') then 1 end) cnt               
		        from orders
		        group by cancel_date) a,      
		        (SELECT to_date(TO_DATE('220801','YY-MM-DD') + LEVEL - 1, 'YY-MM-DD') AS dt
		        FROM dual 
		        CONNECT BY LEVEL <= (TO_DATE('230228','YY-MM-DD') - TO_DATE('220801','YY-MM-DD') + 1)) b
		WHERE b.dt = a.order_date(+) 
		group by TO_CHAR(b.dt, 'YY-MM')
		order by TO_CHAR(b.dt, 'YY-MM')	
	]]>	
	</select>
		
		
	<!-- 관리자 : 결제취소/반품요청 승인 -->
	<update id="orderAprvl">
		UPDATE orders
		SET
		<if test="order_status == 10">
			order_status = 11
		</if> 
		<if test="order_status == 12">
			order_status = 13
		</if>  		   
		WHERE  order_no = #{order_no}
	</update>
	
	<!--  관리자 : 주문 총 관리 -->
	<select id="orderMngmn" resultType="HashMap">
		SELECT order_no, 
			   user_id, 
			   order_name, 
			   final_price, 
			   pay_method, 
			   TO_CHAR(order_date, 'YY.MM.DD HH24:MI') AS order_date, 
			   order_status
		FROM  (SELECT ROWNUM rnum, 
					  order_no, 
					  user_id, 
					  order_name, 
					  final_price, 
					  pay_method, 
					  order_date, 
					  order_status
		        FROM  (SELECT o.order_no, 
		       				 u.user_id, 
		       				 o.order_name, 
		       				 y.final_price, 
		       				 y.pay_method, 
		       				 o.order_date, 
		       				 o.order_status
		           	  FROM   orders o, 
		           	         pay y, 
		           	         users u
		              WHERE  o.pay_no = y.pay_no AND
		                     o.user_no = u.user_no
							  <if test='srchCrtr.equals("all")'>
						      AND (order_no   LIKE '%' || #{srchKey}  || '%' OR
						           user_id    LIKE '%' || #{srchKey}  || '%' OR
						           order_name LIKE '%' || #{srchKey}  || '%' OR
						           pay_method LIKE '%' || #{srchKey}  || '%')
						      </if>
						      <if test='srchCrtr.equals("order_no")'>
						      AND  order_no   LIKE '%' || #{srchKey}  || '%'	  
						      </if>  						      
						      <if test='srchCrtr.equals("user_id")'>
						      AND  user_id    LIKE '%' || #{srchKey}  || '%'	  
						      </if>    
						      <if test='srchCrtr.equals("order_name")'>
						      AND  order_name LIKE '%' || #{srchKey}  || '%'	   
						      </if>  		         
						      <if test='srchCrtr.equals("pay_method")'>
						      AND  pay_method LIKE '%' || #{srchKey}  || '%'	   		         		      
						      </if> 
							  <choose>
							  	<when test="order_status == 100">
							  		AND 1=1
							  	</when>
							  	<otherwise>
							  		AND order_status = #{order_status}
							  	</otherwise>
							  </choose>
			 				  AND order_date BETWEEN #{srchStrDate} AND TO_DATE(TO_DATE(#{srchEndDate})+1)		
													       
						     
		              ORDER BY order_no DESC)
		      )
		WHERE rnum BETWEEN ((#{pageNum}-1) * #{amount})+1 AND 
		                     #{pageNum} * #{amount} 
                             
		ORDER BY rnum
	</select>
	
	<!--  관리자 : 주문 총 관리 개수 -->	
	<select id="orderMngmnCount" resultType="int">
		SELECT COUNT(*) cnt
		FROM   orders o, pay y, users u
		WHERE  (o.pay_no = y.pay_no AND
		       o.user_no = u.user_no)
		      <if test='srchCrtr.equals("all")'>
		      AND (order_no   LIKE '%' || #{srchKey}  || '%' OR
		           user_id    LIKE '%' || #{srchKey}  || '%' OR
		           order_name LIKE '%' || #{srchKey}  || '%' OR
		           pay_method LIKE '%' || #{srchKey}  || '%')
		      </if>
			  <if test='srchCrtr.equals("order_no")'>
			  AND  order_no   LIKE '%' || #{srchKey}  || '%'	  
			  </if>  			      
		      <if test='srchCrtr.equals("user_id")'>
		      AND  user_id    LIKE '%' || #{srchKey}  || '%'	  
		      </if>    
		      <if test='srchCrtr.equals("order_name")'>
		      AND  order_name LIKE '%' || #{srchKey}  || '%'	   
		      </if>  		         
		      <if test='srchCrtr.equals("pay_method")'>
		      AND  pay_method LIKE '%' || #{srchKey}  || '%'	   		         		      
		      </if>  	
			  <choose>
				<when test="order_status == 100">
					AND 1=1
				</when>
				<otherwise>
					AND order_status = #{order_status}
				</otherwise>
			  </choose>			  
			  AND order_date BETWEEN #{srchStrDate} AND TO_DATE(TO_DATE(#{srchEndDate})+1)			  	      	       
	</select>	
	
	
	<!-- 관리자 : 주문 총 관리 세부내역 -->
	<select id="orderMngmnDtls" resultType="HashMap">
		SELECT o.order_no, 
		       p.product_count,
		       b.title,
		       b.book_price, 
		       y.total_price,
		       y.final_price,
		       y.use_point,
		       y.save_point,
		       y.pay_fee,
		       TO_CHAR(o.cancel_date, 'YY.MM.DD HH24:MI') AS cancel_date,
		       TO_CHAR(o.order_date, 'YY.MM.DD HH24:MI') AS order_date,
		       o.order_address,
		       o.order_comment,
		       o.order_receiver,
		       o.order_tel,
		       o.order_status,
		       u.user_no,
		       d.invoice_no,
		       d.courier,
		       TO_CHAR(d.start_date, 'YY.MM.DD HH24:MI') AS start_date,
		       TO_CHAR(d.cmplt_date, 'YY.MM.DD HH24:MI') AS cmplt_date
		FROM   purchase P, 
		       orders o, 
		       pay y, 
		       book b,
		       users u,
		       delivery d
		WHERE  o.order_no = p.order_no AND
		       o.pay_no = y.pay_no AND
		       p.book_no = b.book_no AND
		       o.user_no = u.user_no AND
		       o.order_no = d.order_no AND
		       o.order_no = #{order_no} 
	</select>	
				
	
	<!-- 일주일치 일일 판매량 -->
	<select id="Order_BY_7DAYS" resultType="HashMap">
	<![CDATA[
		SELECT SUM(product_count) as pc, TO_CHAR(orders.order_date,'YYYY-MM-dd') AS dt 
		FROM purchase 
		RIGHT JOIN orders 
		ON purchase.order_no = orders.order_no
		WHERE TO_DATE(TO_CHAR(orders.order_date,'YYYY-MM-dd')) <= (sysdate) AND to_date(to_char(orders.order_date,'YYYY-MM-dd')) > (sysdate-7)
		GROUP BY TO_CHAR(orders.order_date,'YYYY-MM-dd')
	]]>	    
	</select>		
	
	
	
	
</mapper>