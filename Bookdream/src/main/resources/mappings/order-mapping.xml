<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
			
<mapper namespace="OrderDAO">

	<resultMap type="order" id="orderList">
		<result property="order_no" column="ORDER_NO" />
		<result property="order_name" column="ORDER_NAME" />	
		<result property="user_no" column="USER_NO" />	
		<result property="order_date" column="ORDER_DATE" />	
		<result property="order_status" column="ORDER_STATUS" />	
		<result property="status_count" column="STATUS_COUNT" />	
		<collection property="purchaseVO" resultMap="purchaseList"></collection>		
		<collection property="bookVO" resultMap="bookList"></collection>
		<collection property="payVO" resultMap="payList"></collection>
	</resultMap>	

	<resultMap type="purchase" id="purchaseList">
		<result property="book_no" column="BOOK_NO"/>
		<result property="order_no" column="ORDER_NO" />		
	</resultMap>

	<resultMap type="book" id="bookList">
		<result property="book_no" column="BOOK_NO"/>
		<result property="title" column="TITLE" />
		<result property="book_img" column="BOOK_IMG" />		
	</resultMap>

	<resultMap type="pay" id="payList">
		<result property="final_price" column="FINAL_PRICE"/>

	</resultMap>
	
	<insert id="insertOrder" >
		INSERT INTO orders(ORDER_NO, 
						   USER_NO, 
						   PAY_NO, 
						   ORDER_NAME, 
						   ORDER_COMMENT, 
						   ORDER_DATE,
						   ORDER_RECEIVER, 
						   ORDER_ADDRESS, 
						   ORDER_TEL 
						   )
		VALUES  (#{pay_no}, 
		         #{user_no}, 
		         #{pay_no}, 
		         #{order_name}, 
		         #{order_comment}, 
		         #{order_date},
		         #{order_receiver}, 
		         #{order_address}, 
		         #{order_tel} 
		         )
	</insert>
		
	<!-- 마이페이지 주문조회 (간단) 1개월 이내만 조회!! -->
	<select id="searchOrder" parameterType="order" resultMap="orderList">		
		SELECT order_no, 
			   order_name, 
			   book_img, 
      		   order_date,
			   final_price,
			   order_status
		FROM   (select o.order_no, 
                	   o.order_name, 
                       b.book_img, 
                       o.order_date,
                       y.final_price,
                       o.order_status,
	 			       ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
	 			from   orders o, 
	 			       purchase p, 
	 			       book b,
	 			       pay y
	 			where  p.book_no = b.book_no   AND
                       p.order_no = o.order_no AND
                       y.pay_no = o.order_no   AND
                       o.user_no = #{user_no}
                )
        WHERE rn = 1 
        	<![CDATA[
        	 	AND order_date > sysdate-#{search_date} 
        	]]>
         	<choose>
         		<when test="search_status == 100 ">
         			AND	1 = 1         			
         		</when>
         		<otherwise>
        			AND order_status = #{search_status}         			
         		</otherwise>
         	</choose>
		order by order_no desc

	</select>
	
	<!-- 마이페이지 최근 구매 조회-->
	<select id="recentOrder" parameterType="order" resultMap="orderList">		
		SELECT order_no, 
			   order_name, 
			   book_img, 
      		   order_date,
			   final_price,
			   order_status
		FROM   (select o.order_no, 
                	   o.order_name, 
                       b.book_img, 
                       o.order_date,
                       y.final_price,
                       o.order_status,
	 			       ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
	 			from   orders o, 
	 			       purchase p, 
	 			       book b,
	 			       pay y
	 			where  p.book_no = b.book_no   AND
                       p.order_no = o.order_no AND
                       y.pay_no = o.order_no   AND
                       o.user_no = #{user_no} 
                order by order_no desc
                )
        WHERE rn = 1 AND
			  rownum = 1		


	</select>	
	
	

	<!-- 마이페이지 주문조회 (간단) (관리자 페이지로 넘길예정 : 페이징처리추가됨)
		
	<select id="searchOrder" parameterType="order" resultMap="orderList">		
		select order_no,
			   order_name,
			   book_img, 
      		   order_date,
			   final_price,
			   order_status				   
		FROM  (SELECT  ROW_NUMBER() OVER (ORDER BY rnum DESC) AS rnum,
		              order_no, 
		              order_name, 
		              book_img,
		              order_date,	
		              final_price, 
		              order_status
		      from   (select rownum rnum, 
		      				 o.order_no, 
		                     o.order_name, 
		                     b.book_img, 
		                     o.order_date,
		                     y.final_price,
		                     o.order_status,
		                     ROW_NUMBER() OVER(PARTITION BY o.order_no ORDER BY o.order_name DESC) AS rn                       
		              from   orders o, 
		                     purchase p, 
		                     book b,
		                     pay y
		              where  p.book_no = b.book_no   AND
		                     p.order_no = o.order_no AND
		                     y.pay_no = o.order_no   AND
		                     o.user_no = #{user_no}
		              )
		     where rn = 1
		     order by rnum desc)
		     
		WHERE rnum between ((#{pageNum}-1) * #{amount})+1 AND 
		                     #{pageNum} * #{amount}	
		order by order_no desc                     
	</select>	
	
	-->	

	<!-- 주문취소/반품요청시 배송상태 변경, 취소시간등록-->
	<update id="cancelOrder">
		UPDATE orders
		SET	   order_status = #{order_status},
			   cancel_date = sysdate
		WHERE  order_no = #{order_no} 
	</update>
								
	<!-- 도서반환 -->	
	<update id="updateBookStock">	
		UPDATE book b
		SET    b.stock = (select (b.stock + p.product_count) as stock
                 		  from  purchase p,
                 		  		orders o
                 		  where p.book_no = b.book_no AND
                  	            p.order_no = o.order_no AND                   		   
                 		  		o.order_no = #{order_no}
                 		  )
                  
		WHERE  exists (select 1
                 	   from    purchase p,
                 		  	   orders o
                  	   where   p.book_no = b.book_no AND 
                  	           p.order_no = o.order_no AND      
                 		  	   o.order_no = #{order_no}
               		   ) 
		
	</update>	
	
	<!-- 포인트 반환 -->	
	<update id="updateUserPoint">
		UPDATE users u
		SET    user_point = (select (user_point + (use_point - save_point)) as user_point
                  			 from    
                  			 		 pay p
                  			 where   u.user_no = #{user_no} AND 
                  			 		 p.pay_no = #{order_no}
                  			 )
                  			 
		WHERE  exists (select 1 
         		       from   
         		       		  pay p 
             	       where  u.user_no = #{user_no} AND           	       
             	       		  p.pay_no = #{order_no}
             	      ) 
	
	</update>	

	<!-- 주문조회시 결제날짜와 현재날짜를 계산해서 갱신함 -->
	<update id="trackingUpdate">		
		<![CDATA[	
		UPDATE orders
		SET    order_status = 1
		WHERE  order_date + 1 < sysdate AND
      		   order_status = 0
      	]]>	  
	</update>
		
	<update id="trackingUpdate2">		
		<![CDATA[	
		UPDATE orders
		SET    order_status = 2
		WHERE  order_date + 2 < sysdate AND
      		   order_status = 1
      	]]>	  
	</update>
	
	<!-- 배송상태별 카운터 -->
	<select id="orderStatusCount" resultType="HashMap">
		SELECT order_status, count(order_status) as statusCount
		FROM   orders
		WHERE  
		<choose>
			<when test='admin.equals("admin")'>
			1 = 1
			</when>
			<otherwise>
			user_no = #{user_no}
			</otherwise>
		</choose>
		group by order_status
	</select>
			
	<!-- 관리자 : 주간 주문 카운트 -->		
	<select id="orderDateCount" resultType="HashMap">
	<![CDATA[
		SELECT to_char(b.dt, 'MM-DD')as order_date,
		       nvl(sum(a.cnt), 0) cnt
		FROM  (select to_date(order_date, 'YY-MM-DD')as order_date,
		              count(case when order_status between 0 and 3 AND 
              		  to_date(order_date, 'YY-MM-DD') between to_date(sysdate-4, 'YY-MM-DD') AND 
              		  to_date(sysdate, 'YY-MM-DD') then 1 end) cnt
		       from orders
		       group by order_date) a,      
		      
		      (select to_date(TO_DATE(sysdate-6,'YY/MM/DD') + LEVEL - 1, 'YY/MM/DD') AS dt
		       from dual 
		       CONNECT BY LEVEL <= (TO_DATE(sysdate,'YY/MM/DD') - TO_DATE(sysdate-6,'YY/MM/DD') + 1)) b
		WHERE b.dt = order_date(+)
		group by b.dt
		order by b.dt  
	]]>	    
	</select>		

	<!-- 관리자 : 주간 주문 취소/반품 카운트 -->		
	<select id="orderCancelDateCount" resultType="HashMap">
	<![CDATA[
		SELECT nvl(sum(a.cnt2), 0) cnt2
		FROM  (select to_date(cancel_date, 'YY-MM-DD') as order_cancel_date,
		              count(cancel_date) cnt2
		       from orders
		       where to_date(cancel_date, 'YY-MM-DD') between to_date(sysdate-4, 'YY-MM-DD') AND 
		             to_date(sysdate, 'YY-MM-DD') AND
		             order_status between 10 and 13
		       group by cancel_date) a,      
		       
		      (select to_date(TO_DATE(sysdate-6,'YY/MM/DD') + LEVEL - 1, 'YY/MM/DD') AS dt
		       from dual 
		       CONNECT BY LEVEL <= (TO_DATE(sysdate,'YY/MM/DD') - TO_DATE(sysdate-6,'YY/MM/DD') + 1)) b
		WHERE b.dt = order_cancel_date(+)
		group by b.dt
		order by b.dt  
	]]>	    
	</select>
	
	
	<!-- 관리자 : 월간 주문 카운트 -->
	<select id="orderMlyDateCount" resultType="HashMap">
	<![CDATA[	
		SELECT  TO_CHAR(b.dt, 'YY-MM')as order_date, 
		        nvl(sum(a.cnt), 0) cnt
		FROM    (select to_date(order_date, 'YY-MM-DD')as order_date, 
		               count(case when order_status between 0 and 3 AND 
		                     to_date(order_date, 'YY-MM-DD') between to_date('220801', 'YY-MM-DD') AND 
		                     to_date('230228', 'YY-MM-DD') then 1 end) cnt               
		        from orders
		        group by order_date) a,      
		        (SELECT to_date(TO_DATE('220801','YY-MM-DD') + LEVEL - 1, 'YY-MM-DD') AS dt
		        FROM dual 
		        CONNECT BY LEVEL <= (TO_DATE('230228','YY-MM-DD') - TO_DATE('220801','YY-MM-DD') + 1)) b
		WHERE b.dt = a.order_date(+) 
		group by TO_CHAR(b.dt, 'YY-MM')
		order by TO_CHAR(b.dt, 'YY-MM')	
	]]>	
	</select>
	
	<!-- 관리자 : 월간 주문 취소/반품 카운트 -->
	<select id="orderMlyCancelDateCount" resultType="HashMap">
	<![CDATA[		
		SELECT  nvl(sum(a.cnt), 0) cnt2
		FROM    (select to_date(cancel_date, 'YY-MM-DD')as order_date, 
		                count(case when order_status between 10 and 13 AND 
		                      to_date(cancel_date, 'YY-MM-DD') between to_date('220801', 'YY-MM-DD') AND 
		                      to_date('230228', 'YY-MM-DD') then 1 end) cnt               
		        from orders
		        group by cancel_date) a,      
		        (SELECT to_date(TO_DATE('220801','YY-MM-DD') + LEVEL - 1, 'YY-MM-DD') AS dt
		        FROM dual 
		        CONNECT BY LEVEL <= (TO_DATE('230228','YY-MM-DD') - TO_DATE('220801','YY-MM-DD') + 1)) b
		WHERE b.dt = a.order_date(+) 
		group by TO_CHAR(b.dt, 'YY-MM')
		order by TO_CHAR(b.dt, 'YY-MM')	
	]]>	
	</select>
	
	<!-- 관리자 : 금주 취소/반품 현황 -->
	<select id="cancelOrderWek" resultType="HashMap">
		SELECT order_no, 
			   order_name, 
			   TO_CHAR(order_date, 'YY.MM.DD HH24:MI') order_date,
			   order_status, 
			   TO_CHAR(CANCEL_DATE, 'YY.MM.DD HH24:MI') cancel_date,
			   user_id,
			   user_no
		FROM (SELECT rownum rnum, 
					 order_no, 
					 order_name, 
					 ORDER_DATE, 
					 order_status, 
					 CANCEL_DATE,
					 user_id,
					 o.user_no
		      FROM   orders o, users u
		      WHERE (o.user_no = u.user_no and
					 order_date between sysdate-6 and sysdate) AND
				    (order_status = 12 or
				     order_status = 10))
		WHERE  rnum between ((#{pageNum}-1) * #{amount})+1 AND 
		                     #{pageNum} * #{amount}	
		ORDER BY CANCEL_DATE
	</select>
	

	<!-- 관리자 : 금주 취소/반품 현황 페이징처리용 카운트 -->
	<select id="cancelOrderWekCount" resultType="int">
		SELECT count(order_no) cnt
		FROM   orders o, users u
		WHERE  (o.user_no = u.user_no and
			   order_date between sysdate-6 and sysdate) AND
		       (order_status = 12 or
		       order_status = 10) 
	</select>					
	
	<!-- 관리자 : 결제취소/반품요청 승인 -->
	<update id="orderAprvl">
		UPDATE orders
		SET
		<if test="order_status == 10">
			order_status = 11
		</if> 
		<if test="order_status == 12">
			order_status = 13
		</if>  		   
		WHERE  order_no = #{order_no}
	</update>
	
	<!--  관리자 : 주문 총 관리 -->
	<select id="orderMngmn" resultType="HashMap">
		SELECT order_no, 
			   user_id, 
			   order_name, 
			   final_price, 
			   pay_method, 
			   TO_CHAR(order_date, 'YY.MM.DD HH24:MI') AS order_date, 
			   order_status
		FROM  (SELECT ROWNUM rnum, 
					  order_no, 
					  user_id, 
					  order_name, 
					  final_price, 
					  pay_method, 
					  order_date, 
					  order_status
		        FROM  (SELECT o.order_no, 
		       				 u.user_id, 
		       				 o.order_name, 
		       				 y.final_price, 
		       				 y.pay_method, 
		       				 o.order_date, 
		       				 o.order_status
		           	  FROM   orders o, 
		           	         pay y, 
		           	         users u
		              WHERE  o.pay_no = y.pay_no AND
		                     o.user_no = u.user_no
							  <if test='srchCrtr.equals("all")'>
						      AND (order_no   LIKE '%' || #{srchKey}  || '%' OR
						           user_id    LIKE '%' || #{srchKey}  || '%' OR
						           order_name LIKE '%' || #{srchKey}  || '%' OR
						           pay_method LIKE '%' || #{srchKey}  || '%')
						      </if>
						      <if test='srchCrtr.equals("order_no")'>
						      AND  order_no   LIKE '%' || #{srchKey}  || '%'	  
						      </if>  						      
						      <if test='srchCrtr.equals("user_id")'>
						      AND  user_id    LIKE '%' || #{srchKey}  || '%'	  
						      </if>    
						      <if test='srchCrtr.equals("order_name")'>
						      AND  order_name LIKE '%' || #{srchKey}  || '%'	   
						      </if>  		         
						      <if test='srchCrtr.equals("pay_method")'>
						      AND  pay_method LIKE '%' || #{srchKey}  || '%'	   		         		      
						      </if> 
		              ORDER BY order_no DESC)
		      )
		WHERE rnum BETWEEN ((#{pageNum}-1) * #{amount})+1 AND 
		                     #{pageNum} * #{amount} 
                             
		ORDER BY rnum
	</select>
	
	<!--  관리자 : 주문 총 관리 개수 -->	
	<select id="orderMngmnCount" resultType="int">
		SELECT COUNT(*) cnt
		FROM   orders o, pay y, users u
		WHERE  (o.pay_no = y.pay_no AND
		       o.user_no = u.user_no)
		      <if test='srchCrtr.equals("all")'>
		      AND (order_no   LIKE '%' || #{srchKey}  || '%' OR
		           user_id    LIKE '%' || #{srchKey}  || '%' OR
		           order_name LIKE '%' || #{srchKey}  || '%' OR
		           pay_method LIKE '%' || #{srchKey}  || '%')
		      </if>
			  <if test='srchCrtr.equals("order_no")'>
			  AND  order_no   LIKE '%' || #{srchKey}  || '%'	  
			  </if>  			      
		      <if test='srchCrtr.equals("user_id")'>
		      AND  user_id    LIKE '%' || #{srchKey}  || '%'	  
		      </if>    
		      <if test='srchCrtr.equals("order_name")'>
		      AND  order_name LIKE '%' || #{srchKey}  || '%'	   
		      </if>  		         
		      <if test='srchCrtr.equals("pay_method")'>
		      AND  pay_method LIKE '%' || #{srchKey}  || '%'	   		         		      
		      </if>  		       
	</select>	
	
	
	<!-- 관리자 : 주문 총 관리 세부내역 -->
	<select id="orderMngmnDtls" resultType="HashMap">
		SELECT o.order_no, 
		       p.product_count,
		       b.title,
		       b.book_price, 
		       y.total_price,
		       y.final_price,
		       y.use_point,
		       y.save_point,
		       y.pay_fee,
		       TO_CHAR(o.cancel_date, 'YY.MM.DD HH24:MI') AS cancel_date,
		       TO_CHAR(o.order_date, 'YY.MM.DD HH24:MI') AS order_date,
		       o.order_address,
		       o.order_comment,
		       o.order_receiver,
		       o.order_tel,
		       o.order_status
		FROM   purchase P, 
		       orders o, 
		       pay y, 
		       book b
		WHERE  o.order_no = p.order_no AND
		       o.pay_no = y.pay_no AND
		       p.book_no = b.book_no AND
		       o.order_no = #{order_no}
	</select>	
		
</mapper>